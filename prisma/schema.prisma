// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id         String   @id @default(cuid()) // âœ… changed from Int to String
  password   String
 name        String
 email String @unique

  File    File[]
  Message Message[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url      String
  key      String
  messages Message[]
  chunks Chunk[] 
  quizzes  Quiz[]
  flashcards Flashcards[]
  podcasts Podcast[]
  transcripts Transcript[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  File          File?    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  fileId    String?
}


model Chunk {
  id       String   @id @default(cuid())
  text     String   @db.Text()
  file     File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  fileId   String

  createdAt DateTime @default(now())
}

model Quiz {
  id        String   @id @default(uuid())
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    String
  title     String
  createdAt DateTime @default(now())
  questions QuizQuestion[]
}

model QuizQuestion {
  id        String   @id @default(uuid())
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String
  question  String
  options   String[] // Array of options
  answer    String   // Correct answer
  createdAt DateTime @default(now())
}

model Flashcards {
  id        String   @id @default(uuid())
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    String
  title     String
  createdAt DateTime @default(now())
  cards     Flashcard[]
}

model Flashcard {
  id           String     @id @default(uuid())
  flashcards   Flashcards @relation(fields: [flashcardsId], references: [id], onDelete: Cascade)
  flashcardsId String
  question     String
  answer       String
  createdAt    DateTime   @default(now())
}

model Podcast {
  id            String   @id @default(uuid())
  file          File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId        String
  title         String
  description   String   @db.Text()
  totalDuration String
  coverImage    String?
  userId        String?
  // New fields for enhanced podcast features
  backgroundMusicUrl String?
  backgroundMusicVolume Float @default(0.3)
  voiceSettings Json? // Store voice configuration
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sections      PodcastSection[]
}

model PodcastSection {
  id          String   @id @default(uuid())
  podcast     Podcast  @relation(fields: [podcastId], references: [id], onDelete: Cascade)
  podcastId   String
  title       String
  description String   @db.Text()
  content     String   @db.Text()
  duration    String
  audioUrl    String?
  // New fields for multiple voices
  speaker1AudioUrl String?
  speaker2AudioUrl String?
  speaker1VoiceId  String? // ElevenLabs voice ID for speaker 1
  speaker2VoiceId  String? // ElevenLabs voice ID for speaker 2
  speaker1Text     String? @db.Text() // Text for speaker 1
  speaker2Text     String? @db.Text() // Text for speaker 2
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transcript {
  id        String   @id @default(uuid())
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    String
  title     String
  content   String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
